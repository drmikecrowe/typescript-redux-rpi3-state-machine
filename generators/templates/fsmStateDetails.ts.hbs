import debug from "debug";
const dbg: debug.Debugger = debug("fsm:states:{{stateName}}");

import update from "immutability-helper";
import { Action } from "redux";
import { delay, race, select, take, takeEvery } from "redux-saga/effects";
import { {{stateNameCaps}}, {{beforeStateNameCaps}}, {{leaveStateNameCaps}}, CANCEL_TRANSITION } from "../fsmDefinitions";
import { IFsmState, getFsmStateMachine } from "../index";


// ***************** [ States ] ***************** //
export interface I{{stateName}} {}

export let initial{{stateName}}: I{{stateName}} = {};

// ***************** [ Sagas ] ***************** //
export function* {{beforeStateName}}Saga() {
    const fsm: StateMachine = yield select(getFsmStateMachine);
    yield takeEvery({{beforeStateNameCaps}}, function* () {
        dbg(`{{beforeStateName}}Sagas: {{beforeStateNameCaps}}`);
        const { wait, undo } = yield race({
            undo: take(CANCEL_TRANSITION),
            wait: delay(1),
        });
        const f: any = fsm._fsm;
        if (!!undo) {
            f[`${f[`CURRENT_TRANSITION`]}_CANCEL`] = true;
            dbg(`Cancelling {{stateNameCaps}}`);
        }
    });
}
export function* {{stateName}}Saga() {
    yield takeEvery({{stateNameCaps}}, function* () {
        dbg(`{{stateName}}Sagas: {{stateNameCaps}}`);
    });
}
export function* {{leaveStateName}}Saga() {
    const fsm: StateMachine = yield select(getFsmStateMachine);
    yield takeEvery({{leaveStateNameCaps}}, function* () {
        dbg(`{{leaveStateName}}Sagas: {{leaveStateNameCaps}}`);
        const { wait, undo } = yield race({
            undo: take(CANCEL_TRANSITION),
            wait: delay(1),
        });
        const f: any = fsm._fsm;
        if (!!undo) {
            f[`${f[`CURRENT_TRANSITION`]}_CANCEL`] = true;
            dbg(`Cancelling {{stateNameCaps}}`);
        }
    });
}

export const {{stateName}}Sagas: Array<() => void> = [
    {{beforeStateName}}Saga, 
    {{stateName}}Saga,  
    {{leaveStateName}}Saga
];

// ***************** [ Reducer ] ***************** //

export let fsm{{stateName}}Reducer = (state = initial{{stateName}}, { type }: Action): I{{stateName}} => {
    // dbg(`fsm{{stateName}}Reducer: ${type}`);
    switch (type) {
        case {{stateNameCaps}}:
            dbg(`fsm{{stateName}}Reducer: ${type}`);
            return state;
        default:
            return state;
    }
};











