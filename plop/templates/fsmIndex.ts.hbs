/** **************************************************************************
 * THIS FILE IS AUTO-GENERATED BY plop
 * Do not manually change
 ** ************************************************************************ */

const debug = require("debug")("fsm:controller");
import * as _ from 'lodash';

import { combineReducers } from "redux";
import * as StateMachine from "@taoqf/javascript-state-machine";
import { fsmCreateReducer, fsmOptions, fsmTransitionSagas, StateMachineState, initialStateMachineState } from "./fsmDefinitions";

{{#each states}}
import { fsm{{stateName}}Reducer, {{stateName}}State, initial{{stateName}}State, {{stateName}}Sagas } from "./states/{{stateName}}";
{{/each}}

export * from "./fsmDefinitions";

export let fsmSagas: Function[] = _.concat(fsmTransitionSagas, 
{{#each states}}    {{stateName}}Sagas{{#if @last}}{{else}},{{/if}}
{{/each}}
);

export interface FsmState {
    fsm: StateMachineState
{{#each states}}    {{stateName}}: {{stateName}}State
{{/each}}
}

export let initialFsmState: FsmState = {
    fsm: initialStateMachineState,
{{#each states}}    {{stateName}}: initial{{stateName}}State{{#if @last}}{{else}},{{/if}}
{{/each}}
};

export let fsmStateReducer = combineReducers<FsmState | undefined>({
    fsm: fsmCreateReducer,
{{#each states}}    {{stateName}}: fsm{{stateName}}Reducer{{#if @last}}{{else}},{{/if}}
{{/each}}
});